openapi: 3.0.1
info:
  title: Digital Peace Talks
  description: This is a specification for DPT server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/S9715/DPT/1.0.0
  description: SwaggerHub API Auto Mocking
tags:
- name: statement
  description: Access to statements made by users
- name: dialog
  description: Get, create or update a dialog
- name: user
  description: User operations
paths:
  /metadata/user/{publicKey}/:
    get:
      tags:
      - metadata
      - user
      summary: Gets metadata of a specific user
      operationId: getUserMetadata
      parameters:
      - name: publicKey
        in: path
        description: User that needs to be updated
        required: true
        style: simple
        explode: false
        schema:
          pattern: ^[a-zA-Z0-9]{64}$
          type: string
      responses:
        200:
          description: User has been found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserMetadata'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      x-swagger-router-controller: Metadata
  /user/:
    post:
      tags:
      - user
      summary: Creates a user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-swagger-router-controller: User
  /user/login/:
    post:
      tags:
      - user
      summary: Logs user into the system
      description: Issues a JWT for the user - [click for further reading](http://jwt.io)
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      x-swagger-router-controller: User
  /user/{publicKey}/:
    put:
      tags:
      - user
      summary: Updates a user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: publicKey
        in: path
        description: User that needs to be updated
        required: true
        style: simple
        explode: false
        schema:
          pattern: ^[a-zA-Z0-9]{64}$
          type: string
      requestBody:
        description: Updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: User has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
      - bearerAuth: []
      x-swagger-router-controller: User
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: publicKey
        in: path
        description: The name that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          pattern: ^[a-f\d]{24}$
          type: string
      responses:
        200:
          description: User has been deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
      security:
      - bearerAuth: []
      x-swagger-router-controller: User
  /statement/:
    summary: Contains statment operations
    get:
      tags:
      - statement
      summary: Gets all statements
      operationId: getStatements
      responses:
        200:
          description: Succesful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Statement'
      x-swagger-router-controller: Statement
    put:
      tags:
      - statement
      summary: Updates a statement
      description: The user has changed its mind and would like to alter the statement. This should work only if the user is the one who made the statement
      operationId: statementPUT
      requestBody:
        description: Statement Object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Statement'
        required: true
      responses:
        200:
          description: Statement was updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
      - bearerAuth: []
      x-swagger-router-controller: Statement
    post:
      tags:
      - statement
      summary: Creates a new statement
      operationId: statementPOST
      requestBody:
        description: Statement Object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Statement'
        required: true
      responses:
        201:
          description: Statement was created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
      - bearerAuth: []
      x-swagger-router-controller: Statement
  /dialog/:
    summary: Main dialog endpoint
    post:
      tags:
      - dialog
      summary: Creates a dialog
      operationId: createDialog
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dialog'
        required: true
      responses:
        200:
          description: Dialog has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dialog'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
      - bearerAuth: []
      x-swagger-router-controller: Dialog
  /dialog/{dialogId}/:
    summary: Endpoint for a specific dialog
    get:
      tags:
      - dialog
      summary: Gets a specific dialog by its ID
      operationId: getDialog
      parameters:
      - name: dialogId
        in: path
        description: ID of dialog to return
        required: true
        style: simple
        explode: false
        schema:
          pattern: ^[a-f\d]{24}$
          type: string
      responses:
        200:
          description: Dialog found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dialog'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        404:
          description: Dialog not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      x-swagger-router-controller: Dialog
    put:
      tags:
      - dialog
      summary: Updates a dialog (with a message)
      operationId: updateDialog
      parameters:
      - name: dialogId
        in: path
        description: ID of dialog to update
        required: true
        style: simple
        explode: false
        schema:
          pattern: ^[a-f\d]{24}$
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dialog'
      security:
      - bearerAuth: []
      x-swagger-router-controller: Dialog
components:
  schemas:
    Statement:
      type: object
      properties:
        id:
          pattern: ^[a-f\d]{24}$
          type: string
        content:
          type: string
          example: Batman can win superman
        user:
          pattern: ^[a-f\d]{24}$
          type: string
          description: UUID of linked user
    Crisis:
      type: object
      properties:
        id:
          pattern: ^[a-f\d]{24}$
          type: string
        startDate:
          type: string
          format: date-time
        expirationDate:
          type: string
          format: date-time
        initiator:
          pattern: ^[a-f\d]{24}$
          type: string
          description: UUID of the crisis intiator
        reason:
          type: string
          description: The reason for the crisis
        causingMessage:
          pattern: ^[a-f\d]{24}$
          type: string
          description: ID of the message that caused the crisis
    Dialog:
      type: object
      properties:
        id:
          pattern: ^[a-f\d]{24}$
          type: string
        statement:
          pattern: ^[a-f\d]{24}$
          type: string
          description: ID of linked statement
        statementProposition:
          type: string
          description: Proposition for changing the linked statement
        crisises:
          type: array
          description: All of the dialog's crisises
          items:
            $ref: '#/components/schemas/Crisis'
        startDate:
          type: string
          format: date-time
        messges:
          type: array
          items:
            $ref: '#/components/schemas/Message'
        initiator:
          pattern: ^[a-f\d]{24}$
          type: string
          description: UUID of the user who requested the dialog
        recipient:
          pattern: ^[a-f\d]{24}$
          type: string
          description: UUID of the dialog's recipient, who accepted the dialog request
        status:
          type: string
          description: A dialog has many statuses. For example, when a dialog has been requested, a new `pending` dialog will be created.
          default: pending
          enum:
          - pending
          - active
          - crisis
          - closed
    Message:
      type: object
      properties:
        id:
          pattern: ^[a-f\d]{24}$
          type: string
        timestamp:
          type: string
          format: date-time
        sender:
          pattern: ^[a-f\d]{24}$
          type: string
          description: UUID of the message's sender
        content:
          type: string
          example: Hi mate, how are you doing?
    User:
      type: object
      properties:
        id:
          pattern: ^[a-f\d]{24}$
          type: string
        publicKey:
          pattern: ^[a-zA-Z0-9]{64}$
          type: string
        statements:
          type: array
          description: IDS of statements that the user has made
          items:
            type: array
            items:
              pattern: ^[a-f\d]{24}$
              type: string
        dialogs:
          type: array
          description: IDS of dialogs in which the user participates
          items:
            type: array
            items:
              pattern: ^[a-f\d]{24}$
              type: string
        signupTime:
          type: string
          format: date-time
    UserMetadata:
      type: object
      properties:
        publicKey:
          pattern: ^[a-zA-Z0-9]{64}$
          type: string
        statements:
          type: integer
          description: Amount of statements that the user has made
          format: int32
        refactoredStatements:
          type: integer
          description: Amount of statements that the user has refactored
          format: int32
        dialogs:
          type: integer
          description: Amount of dialogs that the user had participated in
          format: int32
        dialogRequestsSent:
          type: integer
          description: Amount of dialog requests that the user has sent
          format: int32
        dialogRequestsReceived:
          type: integer
          description: Amount of dialog requests that the user has received
          format: int32
        crisises:
          type: integer
          description: Amount of crisies that the user had been involved in
          format: int32
        signupTime:
          type: string
          format: date-time
      description: Metadata for a user. This will be returned by the GET user method, and will not be saved in the database (as the data already exists in the user document)
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    LoginResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        token:
          pattern: ^[A-Za-z0-9-_=]+\.[A-Za-z0-9-_=]+\.?[A-Za-z0-9-_.+/=]*$
          type: string
          description: the generated JWT
    body:
      type: object
      properties:
        publicKey:
          pattern: ^[a-zA-Z0-9]{64}$
          type: string
          description: The user's public key
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
