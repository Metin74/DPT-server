openapi: 3.0.1
info:
  title: Digital Peace Talks
  description: This is a specification for DPT server.
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
  version: 1.0.0
tags:
  - name: statement
    description: Access to statements made by users
  - name: dialog
    description: Get, create or update a dialog
  - name: user
    description: User operations

paths:
  /metadata/user/{publicKey}/:
    get:
      tags:
        - metadata
        - user
      summary: Gets metadata of a specific user
      operationId: getUserMetadata
      parameters:
        - name: publicKey
          in: path
          description: User that needs to be updated
          required: true
          schema:
            type: string
            pattern: "^[a-zA-Z0-9]{111}$"
      responses:
        "200":
          description: User has been found
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/UserMetadata"
        "404":
          description: User not found
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ApiResponse"
  /user/:
    post:
      tags:
        - user
      summary: Creates a user
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        default:
          description: successful operation
          content: {}
  /user/login/:
    post:
      tags:
        - user
      summary: Logs user into the system
      description: Issues a JWT for the user -
        [click for further reading](http://jwt.io)
      operationId: loginUser
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                publicKey:
                  description: The user's public key
                  type: string
                  pattern: "^[a-zA-Z0-9]{111}$"
      responses:
        "200":
          description: successful operation
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "400":
          description: Bad request
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ApiResponse"
  /user/{publicKey}/:
    put:
      tags:
        - user
      summary: Updates a user
      description: This can only be done by the logged in user.
      operationId: updateUser
      security:
        - bearerAuth: []
      parameters:
        - name: publicKey
          in: path
          description: User that needs to be updated
          required: true
          schema:
            type: string
            pattern: "^[a-zA-Z0-9]{111}$"
      requestBody:
        description: Updated user object
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "200":
          description: User has been updated
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: Bad request
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "404":
          description: User not found
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ApiResponse"
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      security:
        - bearerAuth: []
      operationId: deleteUser
      parameters:
        - name: publicKey
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
            pattern: '^[a-f\d]{24}$'
      responses:
        "200":
          description: User has been deleted
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: Invalid username supplied
          content: {}
        "404":
          description: User not found
          content: {}
  /statement/:
    summary: Contains statment operations
    get:
      summary: Gets all statements
      tags:
        - statement
      operationId: getStatements
      responses:
        "200":
          description: Succesful operation
          content:
            "application/json":
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Statement"
    post:
      summary: Creates a new statement
      tags:
        - statement
      requestBody:
        description: Statement Object
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/Statement"
        required: true
      responses:
        "201":
          description: Statement was created successfully
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: Bad request
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ApiResponse"
      security:
        - bearerAuth: []
  /statement/{statementId}/:
    put:
      summary: Updates a statement
      description: The user has changed its mind and
        would like to alter the statement.
        This should work only if the user
        is the one who made the statement
      tags:
        - statement
      security:
        - bearerAuth: []
      parameters:
        - name: statementId
          in: path
          description: ID of statement to update
          required: true
          schema:
            type: string
            pattern: '^[a-f\d]{24}$'
      requestBody:
        description: Statement Object
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/Statement"
        required: true
      responses:
        "200":
          description: Statement was updated successfully
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: Bad request
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ApiResponse"
  /dialog/:
    summary: Main dialog endpoint
    post:
      summary: Creates a dialog
      tags:
        - dialog
      operationId: createDialog
      security:
        - bearerAuth: []
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/Dialog"
        required: true
      responses:
        "400":
          description: Bad request
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "200":
          description: Dialog has been created
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Dialog"
  /dialog/{dialogId}/:
    summary: Endpoint for a specific dialog
    get:
      summary: Gets a specific dialog by its ID
      tags:
        - dialog
      operationId: getDialog
      parameters:
        - name: dialogId
          in: path
          description: ID of dialog to return
          required: true
          schema:
            type: string
            pattern: '^[a-f\d]{24}$'
      responses:
        "400":
          description: Bad request
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "200":
          description: Dialog found
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Dialog"
        "404":
          description: Dialog not found
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ApiResponse"
    put:
      summary: Updates a specific dialog by its ID
      tags:
        - dialog
      operationId: updateDialog
      parameters:
        - name: dialogId
          in: path
          description: ID of dialog to update
          required: true
          schema:
            type: string
            pattern: '^[a-f\d]{24}$'
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/Dialog"
      responses:
        "400":
          description: Bad request
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "200":
          description: Dialog found
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Dialog"
        "404":
          description: Dialog not found
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ApiResponse"
  /dialog/{dialogId}/message/:
    post:
      summary: Posts a message to a dialog
      tags:
        - dialog
      operationId: postMessage
      security:
        - bearerAuth: []
      parameters:
        - name: dialogId
          in: path
          description: ID of dialog to update
          required: true
          schema:
            type: string
            pattern: '^[a-f\d]{24}$'
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/Message"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Dialog"
  /dialog/{dialogId}/crisis/:
    post:
      summary: Posts a crisis to a dialog
      tags:
        - dialog
        - crisis
      operationId: createCrisis
      security:
        - bearerAuth: []
      parameters:
        - name: dialogId
          in: path
          description: ID of dialog to post crisis to
          required: true
          schema:
            type: string
            pattern: '^[a-f\d]{24}$'
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/Message"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Dialog"
components:
  schemas:
    Statement:
      type: object
      properties:
        id:
          type: string
          pattern: '^[a-f\d]{24}$'
        content:
          type: string
          example: Batman can win superman
        user:
          type: string
          description: UUID of linked user
          pattern: '^[a-f\d]{24}$'
    Crisis:
      type: object
      properties:
        id:
          type: string
          pattern: '^[a-f\d]{24}$'
        startDate:
          type: string
          format: date-time
        expirationDate:
          type: string
          format: date-time
        initiator:
          type: string
          description: UUID of the crisis intiator
          pattern: '^[a-f\d]{24}$'
        reason:
          type: string
          description: The reason for the crisis
        causingMessage:
          type: string
          description: ID of the message that caused the crisis
          pattern: '^[a-f\d]{24}$'
    Dialog:
      type: object
      properties:
        id:
          type: string
          pattern: '^[a-f\d]{24}$'
        statement:
          type: string
          description: ID of linked statement
          pattern: '^[a-f\d]{24}$'
        statementProposition:
          type: string
          description: Proposition for changing the linked statement
        crisises:
          type: array
          description: All of the dialog's crisises
          items:
            $ref: "#/components/schemas/Crisis"
        startDate:
          type: string
          format: date-time
        messages:
          type: array
          items:
            $ref: "#/components/schemas/Message"
        initiator:
          type: string
          description: UUID of the user who requested the dialog
          pattern: '^[a-f\d]{24}$'
        recipient:
          type: string
          description: UUID of the dialog's recipient,
            who accepted the dialog request
          pattern: '^[a-f\d]{24}$'
        status:
          description: A dialog has many statuses.
            For example, when a dialog has been requested,
            a new `pending` dialog will be created.
          type: string
          enum:
            - "pending"
            - "active"
            - "crisis"
            - "closed"
          default: "pending"
    Message:
      type: object
      properties:
        id:
          type: string
          pattern: '^[a-f\d]{24}$'
        timestamp:
          type: string
          format: date-time
        sender:
          type: string
          description: UUID of the message's sender
          pattern: '^[a-f\d]{24}$'
        content:
          type: string
          example: "Hi mate, how are you doing?"
    User:
      type: object
      properties:
        id:
          type: string
          pattern: '^[a-f\d]{24}$'
        publicKey:
          type: string
          pattern: "^[a-zA-Z0-9]{111}$"
        statements:
          type: array
          items:
            items:
              type: string
              pattern: '^[a-f\d]{24}$'
          description: IDS of statements that the user has made
        dialogs:
          type: array
          items:
            items:
              type: string
              pattern: '^[a-f\d]{24}$'
          description: IDS of dialogs in which the user participates
        signupTime:
          type: string
          format: date-time
    UserMetadata:
      description:
        Metadata for a user. This will be returned by the GET user method,
        and will not be saved in the database (as the data already exists in the user document)
      type: object
      properties:
        publicKey:
          type: string
          pattern: "^[a-zA-Z0-9]{111}$"
        statements:
          type: integer
          format: int32
          description: Amount of statements that the user has made
        refactoredStatements:
          type: integer
          format: int32
          description: Amount of statements that the user has refactored
        dialogs:
          type: integer
          format: int32
          description: Amount of dialogs that the user had participated in
        dialogRequestsSent:
          type: integer
          format: int32
          description: Amount of dialog requests that the user has sent
        dialogRequestsReceived:
          type: integer
          format: int32
          description: Amount of dialog requests that the user has received
        crisises:
          type: integer
          format: int32
          description: Amount of crisies that the user had been involved in
        signupTime:
          type: string
          format: date-time
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    LoginResponse:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/User"
        token:
          type: string
          description: the generated JWT
          pattern: '^[A-Za-z0-9-_=]+\.[A-Za-z0-9-_=]+\.?[A-Za-z0-9-_.+/=]*$'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
# Added by API Auto Mocking Plugin
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/S9715/DPT/1.0.0
