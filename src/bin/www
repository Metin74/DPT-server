#!/usr/bin/env node

require("../lib/mongoose");
/**
 * Module dependencies.
 */
const http = require("http");
const app = require("../api");
const config = require("../lib/config");
const logger = require("../lib/logger");

const log = logger(config.logger);

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(config.api.port || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);
var io = require('socket.io')();
io.attach(server);


const cookieParser = require('cookie-parser');
var cookieKey = "geheim";
/*
Setup of the socket.io service
*/
io.on('connection', function(socket) {
	console.log("socket.id: "+socket.id);

	socket.on('kanal', function(msg) {
log.info("rooms: "+JSON.stringify(io.sockets.adapter.rooms, null, 2));
log.info("sids: "+JSON.stringify(io.sockets.adapter.sids, null, 2));
		io.emit('kanal', { username: socket.username, message: msg });
		io.emit('channel', { username: socket.username, message: msg });
console.log("rooms:");	
console.log(socket.adapter.rooms);
console.log("got message: "+msg);
	});

	socket.on('channel', function(msg) {
		io.emit('channel', { username: socket.username, message: msg });
		console.log("got message: "+msg);
	});

	socket.on('add user', (payload) => {
		if(payload) {
			var testUUID = require('cookie').parse(payload)['dptUUID'];
			var dptUUID = cookieParser.signedCookie(testUUID, cookieKey);
console.log("check dptUUID: "+dptUUID);
			if(dptUUID != false) {
				socket.dptUUID = dptUUID;
				socket.username = socket.id;
console.log("uuid -> socket.dptUUID: "+socket.dptUUID +' socket.username: '+socket.username);
				socket.emit('private', {method: 'post', path: "/info", payload: {message: 'Welcome back to digitial peace talks, '+socket.username+'.'}});
			}
		}
	});

	socket.on('disconnect', (reason) => {
		console.log(socket.id+" disconnected, reason: "+reason);
		//whoIsOnline();
	});
	//whoIsOnline();
});

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? `Pipe ${port}` : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      log.fatal(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case "EADDRINUSE":
      log.fatal(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? `pipe ${addr}` : `port ${addr.port}`;
  log.debug(`Listening on ${bind}`);

}
